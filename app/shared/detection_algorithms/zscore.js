"use strict";
var zScore = (function () {
    function zScore(lag, threshold, influence) {
        this.lag = lag;
        this.threshold = threshold;
        this.influence = influence;
    }
    zScore.prototype.average = function (data) {
        var sum = data.reduce(function (sum, value) {
            return sum + value;
        }, 0);
        return sum / data.length;
    };
    zScore.prototype.standardDeviation = function (values) {
        var avg = this.average(values);
        var squareDiffs = values.map(function (value) {
            var diff = value - avg;
            var sqrDiff = diff * diff;
            return sqrDiff;
        });
        var avgSquareDiff = this.average(squareDiffs);
        var stdDev = Math.sqrt(avgSquareDiff);
        return stdDev;
    };
    zScore.prototype.emptyArray = function (length) {
        return Array.apply(null, Array(length)).map(Number.prototype.valueOf, 0);
    };
    zScore.prototype.filter = function (y) {
        // Initialise signal results
        var signals = this.emptyArray(y.length);
        // Initialise filtered series
        var filteredY = y.slice(0, this.lag);
        // Initialise filters
        var avgFilter = this.emptyArray(y.length);
        var stdFilter = this.emptyArray(y.length);
        avgFilter[this.lag] = this.average(y.slice(0, this.lag));
        stdFilter[this.lag] = this.standardDeviation(y.slice(0, this.lag));
        //  Loop over all datapoints y(lag+2),...,y(t)
        for (var i = this.lag + 1; i < y.length; i++) {
            // If new value is a specified number of deviations away
            if (Math.abs(y[i] - avgFilter[i - 1]) > this.threshold * stdFilter[i - 1]) {
                if (y[i] > avgFilter[i - 1]) {
                    // Positive signal
                    signals[i] = 1;
                }
                else {
                    // Negative signal
                    signals[i] = 0;
                }
                // Adjust the filters
                filteredY[i] = this.influence * y[i] + (1 - this.influence) * filteredY[i - 1];
                avgFilter[i] = this.average(filteredY.slice(i - this.lag, i));
                stdFilter[i] = this.standardDeviation(filteredY.slice(i - this.lag, i));
            }
            else {
                // No signal
                signals[i] = 0;
                // Adjust the filters
                filteredY[i] = y[i];
                avgFilter[i] = this.average(filteredY.slice(i - this.lag, i));
                stdFilter[i] = this.standardDeviation(filteredY.slice(i - this.lag, i));
            }
        }
        return signals;
    };
    return zScore;
}());
exports.zScore = zScore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoienNjb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsienNjb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtJQU1JLGdCQUFZLEdBQVcsRUFBRSxTQUFpQixFQUFFLFNBQWlCO1FBQ3pELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVELHdCQUFPLEdBQVAsVUFBUSxJQUFtQjtRQUN2QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFLEtBQUs7WUFDdEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRU4sTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFRCxrQ0FBaUIsR0FBakIsVUFBa0IsTUFBTTtRQUNwQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLO1lBQ3hDLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDdkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztZQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELDJCQUFVLEdBQVYsVUFB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O2dCQUNyQixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlELFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBQ0wsYUFBQztBQUFELENBQUMsQUE3RUQsSUE2RUM7QUE3RVksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgelNjb3JlIHtcblxuICAgIGxhZzogbnVtYmVyIDtcbiAgICB0aHJlc2hvbGQ6IG51bWJlcjtcbiAgICBpbmZsdWVuY2U6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGxhZzogbnVtYmVyLCB0aHJlc2hvbGQ6IG51bWJlciwgaW5mbHVlbmNlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5sYWcgPSBsYWc7XG4gICAgICAgIHRoaXMudGhyZXNob2xkID0gdGhyZXNob2xkO1xuICAgICAgICB0aGlzLmluZmx1ZW5jZSA9IGluZmx1ZW5jZTtcbiAgICB9XG5cbiAgICBhdmVyYWdlKGRhdGE6IEFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgbGV0IHN1bSA9IGRhdGEucmVkdWNlKGZ1bmN0aW9uIChzdW0sIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtICsgdmFsdWU7XG4gICAgICAgIH0sIDApO1xuXG4gICAgICAgIHJldHVybiBzdW0gLyBkYXRhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgbGV0IGF2ZyA9IHRoaXMuYXZlcmFnZSh2YWx1ZXMpO1xuXG4gICAgICAgIHZhciBzcXVhcmVEaWZmcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGlmZiA9IHZhbHVlIC0gYXZnO1xuICAgICAgICAgICAgdmFyIHNxckRpZmYgPSBkaWZmICogZGlmZjtcbiAgICAgICAgICAgIHJldHVybiBzcXJEaWZmO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgYXZnU3F1YXJlRGlmZiA9IHRoaXMuYXZlcmFnZShzcXVhcmVEaWZmcyk7XG5cbiAgICAgICAgdmFyIHN0ZERldiA9IE1hdGguc3FydChhdmdTcXVhcmVEaWZmKTtcbiAgICAgICAgcmV0dXJuIHN0ZERldjtcbiAgICB9XG5cbiAgICBlbXB0eUFycmF5KGxlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCBBcnJheShsZW5ndGgpKS5tYXAoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLCAwKVxuICAgIH1cblxuICAgIGZpbHRlcih5OiBBcnJheTxudW1iZXI+KSB7XG4gICAgICAgIC8vIEluaXRpYWxpc2Ugc2lnbmFsIHJlc3VsdHNcbiAgICAgICAgbGV0IHNpZ25hbHMgPSB0aGlzLmVtcHR5QXJyYXkoeS5sZW5ndGgpO1xuICAgICAgICAvLyBJbml0aWFsaXNlIGZpbHRlcmVkIHNlcmllc1xuICAgICAgICBsZXQgZmlsdGVyZWRZID0geS5zbGljZSgwLCB0aGlzLmxhZyk7XG4gICAgICAgIC8vIEluaXRpYWxpc2UgZmlsdGVyc1xuICAgICAgICBsZXQgYXZnRmlsdGVyID0gdGhpcy5lbXB0eUFycmF5KHkubGVuZ3RoKTtcbiAgICAgICAgbGV0IHN0ZEZpbHRlciA9IHRoaXMuZW1wdHlBcnJheSh5Lmxlbmd0aCk7XG5cbiAgICAgICAgYXZnRmlsdGVyW3RoaXMubGFnXSA9IHRoaXMuYXZlcmFnZSh5LnNsaWNlKDAsIHRoaXMubGFnKSk7XG4gICAgICAgIHN0ZEZpbHRlclt0aGlzLmxhZ10gPSB0aGlzLnN0YW5kYXJkRGV2aWF0aW9uKHkuc2xpY2UoMCwgdGhpcy5sYWcpKTtcblxuICAgICAgICAvLyAgTG9vcCBvdmVyIGFsbCBkYXRhcG9pbnRzIHkobGFnKzIpLC4uLix5KHQpXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxhZyArIDE7IGkgPCB5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBJZiBuZXcgdmFsdWUgaXMgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRldmlhdGlvbnMgYXdheVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHlbaV0gLSBhdmdGaWx0ZXJbaSAtIDFdKSA+IHRoaXMudGhyZXNob2xkICogc3RkRmlsdGVyW2kgLSAxXSkge1xuICAgICAgICAgICAgICAgIGlmICh5W2ldID4gYXZnRmlsdGVyW2kgLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQb3NpdGl2ZSBzaWduYWxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsc1tpXSA9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTmVnYXRpdmUgc2lnbmFsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbHNbaV0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGp1c3QgdGhlIGZpbHRlcnNcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFlbaV0gPSB0aGlzLmluZmx1ZW5jZSAqIHlbaV0gKyAoMSAtIHRoaXMuaW5mbHVlbmNlKSAqIGZpbHRlcmVkWVtpIC0gMV07XG4gICAgICAgICAgICAgICAgYXZnRmlsdGVyW2ldID0gdGhpcy5hdmVyYWdlKGZpbHRlcmVkWS5zbGljZShpIC0gdGhpcy5sYWcsIGkpKTtcbiAgICAgICAgICAgICAgICBzdGRGaWx0ZXJbaV0gPSB0aGlzLnN0YW5kYXJkRGV2aWF0aW9uKGZpbHRlcmVkWS5zbGljZShpIC0gdGhpcy5sYWcsIGkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc2lnbmFsXG4gICAgICAgICAgICAgICAgc2lnbmFsc1tpXSA9IDA7XG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IHRoZSBmaWx0ZXJzXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRZW2ldID0geVtpXTtcbiAgICAgICAgICAgICAgICBhdmdGaWx0ZXJbaV0gPSB0aGlzLmF2ZXJhZ2UoZmlsdGVyZWRZLnNsaWNlKGkgLSB0aGlzLmxhZywgaSkpO1xuICAgICAgICAgICAgICAgIHN0ZEZpbHRlcltpXSA9IHRoaXMuc3RhbmRhcmREZXZpYXRpb24oZmlsdGVyZWRZLnNsaWNlKGkgLSB0aGlzLmxhZywgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduYWxzO1xuICAgIH1cbn0gICAgIl19