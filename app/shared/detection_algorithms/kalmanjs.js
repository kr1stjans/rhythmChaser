"use strict";
var KalmanFilter = (function () {
    /**
     * Create 1-dimensional kalman filter
     * @param  {Number} options.R Process noise
     * @param  {Number} options.Q Measurement noise
     * @param  {Number} options.A State vector
     * @param  {Number} options.B Control vector
     * @param  {Number} options.C Measurement vector
     * @return {KalmanFilter}
     */
    function KalmanFilter(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.R, R = _c === void 0 ? 1 : _c, _d = _b.Q, Q = _d === void 0 ? 1 : _d, _e = _b.A, A = _e === void 0 ? 1 : _e, _f = _b.B, B = _f === void 0 ? 0 : _f, _g = _b.C, C = _g === void 0 ? 1 : _g;
        this.R = R; // noise power desirable
        this.Q = Q; // noise power estimated
        this.A = A;
        this.C = C;
        this.B = B;
        this.cov = NaN;
        this.x = NaN; // estimated signal without noise
    }
    /**
     * Filter a new value
     * @param  {Number} z Measurement
     * @param  {Number} u Control
     * @return {Number}
     */
    KalmanFilter.prototype.filter = function (z, u) {
        if (u === void 0) { u = 0; }
        if (isNaN(this.x)) {
            this.x = (1 / this.C) * z;
            this.cov = (1 / this.C) * this.Q * (1 / this.C);
        }
        else {
            // Compute prediction
            var predX = (this.A * this.x) + (this.B * u);
            var predCov = ((this.A * this.cov) * this.A) + this.R;
            // Kalman gain
            var K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));
            // Correction
            this.x = predX + K * (z - (this.C * predX));
            this.cov = predCov - (K * this.C * predCov);
        }
        return this.x;
    };
    return KalmanFilter;
}());
exports.KalmanFilter = KalmanFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FsbWFuanMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrYWxtYW5qcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFVSTs7Ozs7Ozs7T0FRRztJQUNILHNCQUFZLEVBQXdDO1lBQXhDLDRCQUF3QyxFQUF2QyxTQUFLLEVBQUwsMEJBQUssRUFBRSxTQUFLLEVBQUwsMEJBQUssRUFBRSxTQUFLLEVBQUwsMEJBQUssRUFBRSxTQUFLLEVBQUwsMEJBQUssRUFBRSxTQUFLLEVBQUwsMEJBQUs7UUFFMUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7UUFDcEMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7UUFFcEMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLGlDQUFpQztJQUNuRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCw2QkFBTSxHQUFOLFVBQU8sQ0FBQyxFQUFFLENBQUs7UUFBTCxrQkFBQSxFQUFBLEtBQUs7UUFFWCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBRUYscUJBQXFCO1lBQ3JCLElBQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUV4RCxjQUFjO1lBQ2QsSUFBTSxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxRSxhQUFhO1lBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUEzREQsSUEyREM7QUEzRFksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgS2FsbWFuRmlsdGVyIHtcblxuICAgIFI6bnVtYmVyO1xuICAgIFE6bnVtYmVyO1xuICAgIEE6bnVtYmVyO1xuICAgIEM6bnVtYmVyO1xuICAgIEI6bnVtYmVyO1xuICAgIGNvdjpudW1iZXI7XG4gICAgeDpudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgMS1kaW1lbnNpb25hbCBrYWxtYW4gZmlsdGVyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBvcHRpb25zLlIgUHJvY2VzcyBub2lzZVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gb3B0aW9ucy5RIE1lYXN1cmVtZW50IG5vaXNlXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBvcHRpb25zLkEgU3RhdGUgdmVjdG9yXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBvcHRpb25zLkIgQ29udHJvbCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG9wdGlvbnMuQyBNZWFzdXJlbWVudCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtLYWxtYW5GaWx0ZXJ9XG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioe1IgPSAxLCBRID0gMSwgQSA9IDEsIEIgPSAwLCBDID0gMX0gPSB7fSkge1xuXG4gICAgICAgIHRoaXMuUiA9IFI7IC8vIG5vaXNlIHBvd2VyIGRlc2lyYWJsZVxuICAgICAgICB0aGlzLlEgPSBROyAvLyBub2lzZSBwb3dlciBlc3RpbWF0ZWRcblxuICAgICAgICB0aGlzLkEgPSBBO1xuICAgICAgICB0aGlzLkMgPSBDO1xuICAgICAgICB0aGlzLkIgPSBCO1xuICAgICAgICB0aGlzLmNvdiA9IE5hTjtcbiAgICAgICAgdGhpcy54ID0gTmFOOyAvLyBlc3RpbWF0ZWQgc2lnbmFsIHdpdGhvdXQgbm9pc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgYSBuZXcgdmFsdWVcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHogTWVhc3VyZW1lbnRcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHUgQ29udHJvbFxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoeiwgdSA9IDApIHtcblxuICAgICAgICBpZiAoaXNOYU4odGhpcy54KSkge1xuICAgICAgICAgICAgdGhpcy54ID0gKDEgLyB0aGlzLkMpICogejtcbiAgICAgICAgICAgIHRoaXMuY292ID0gKDEgLyB0aGlzLkMpICogdGhpcy5RICogKDEgLyB0aGlzLkMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBDb21wdXRlIHByZWRpY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IHByZWRYID0gKHRoaXMuQSAqIHRoaXMueCkgKyAodGhpcy5CICogdSk7XG4gICAgICAgICAgICBjb25zdCBwcmVkQ292ID0gKCh0aGlzLkEgKiB0aGlzLmNvdikgKiB0aGlzLkEpICsgdGhpcy5SO1xuXG4gICAgICAgICAgICAvLyBLYWxtYW4gZ2FpblxuICAgICAgICAgICAgY29uc3QgSyA9IHByZWRDb3YgKiB0aGlzLkMgKiAoMSAvICgodGhpcy5DICogcHJlZENvdiAqIHRoaXMuQykgKyB0aGlzLlEpKTtcblxuICAgICAgICAgICAgLy8gQ29ycmVjdGlvblxuICAgICAgICAgICAgdGhpcy54ID0gcHJlZFggKyBLICogKHogLSAodGhpcy5DICogcHJlZFgpKTtcbiAgICAgICAgICAgIHRoaXMuY292ID0gcHJlZENvdiAtIChLICogdGhpcy5DICogcHJlZENvdik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy54O1xuICAgIH1cbn0iXX0=